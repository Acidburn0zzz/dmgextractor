package org.catacombae.dmgextractor.encodings.encrypted;

import java.io.PrintStream;
import org.catacombae.dmgextractor.Util;

/** This class was generated by CStructToJavaClass. */
public class V2Header {
    /*
     * struct V2Header
     * size: 248 bytes
     * description: 
     * 
     * BP   Size  Type         Identifier                     Description                                          
     * ------------------------------------------------------------------------------------------------------------
     * 0    1*8   uint8_t[8]   signature                      Header signature (ASCII: 'encrcdsa').                
     * 8    1*44  uint8_t[44]  unknown1                       Unknown data.                                        
     * 52   4     uint32_t     blockSize                      Block size of the encrypted block data.              
     * 56   1*12  uint8_t[12]  unknown2                       Unknown data.                                        
     * 68   4     uint32_t     offsetToDataStart              Offset to the start of the encrypted block data.     
     * 72   1*12  uint8_t[12]  unknown3                       Unknown data.                                        
     * 84   4     uint32_t     possiblePointerToKdfAlgorithm  Could be a pointer to where kdf_algorithm is located.
     * 88   1*8   uint8_t[8]   unknown4                       Unknown data.                                        
     * 96   4     uint32_t     kdfAlgorithm                   Algorithm of the key derivation function.            
     * 100  4     uint32_t     kdfPrngAlgorithm               ?                                                    
     * 104  4     uint32_t     kdfIterationCount              Iteration count (normally 1000).                     
     * 108  4     uint32_t     kdfSaltLen                     Length of kdfSalt (in bytes).                        
     * 112  1*32  uint8_t[32]  kdfSalt                        Salt value for key derivation.                       
     * 144  4     uint32_t     blobEncIvSize                  Size of blobEncIv.                                   
     * 148  1*32  uint8_t[32]  blobEncIv                      Initialization Vector for encryption-key unwrapping. 
     * 180  4     uint32_t     blobEncKeyBits                 Number of bits in the keyblob's encryption key.      
     * 184  4     uint32_t     blobEncAlgorithm               Encryption algorithm used to encrypt the key blob.   
     * 188  4     uint32_t     blobEncPadding                 Padding. (?)                                         
     * 192  4     uint32_t     blobEncMode                    Encryption mode for the algorithm.                   
     * 196  4     uint32_t     encryptedKeyblobSize           Size of encryptedKeyBlob.                            
     * 200  1*48  uint8_t[48]  encryptedKeyblob               The encrypted key blob, containing all keys.         
     */
    
    public static final int STRUCTSIZE = 248;
    
    private final byte[] signature = new byte[1*8];
    private final byte[] unknown1 = new byte[1*44];
    private final byte[] blockSize = new byte[4];
    private final byte[] unknown2 = new byte[1*12];
    private final byte[] offsetToDataStart = new byte[4];
    private final byte[] unknown3 = new byte[1*12];
    private final byte[] possiblePointerToKdfAlgorithm = new byte[4];
    private final byte[] unknown4 = new byte[1*8];
    private final byte[] kdfAlgorithm = new byte[4];
    private final byte[] kdfPrngAlgorithm = new byte[4];
    private final byte[] kdfIterationCount = new byte[4];
    private final byte[] kdfSaltLen = new byte[4];
    private final byte[] kdfSalt = new byte[1*32];
    private final byte[] blobEncIvSize = new byte[4];
    private final byte[] blobEncIv = new byte[1*32];
    private final byte[] blobEncKeyBits = new byte[4];
    private final byte[] blobEncAlgorithm = new byte[4];
    private final byte[] blobEncPadding = new byte[4];
    private final byte[] blobEncMode = new byte[4];
    private final byte[] encryptedKeyblobSize = new byte[4];
    private final byte[] encryptedKeyblob = new byte[1*48];
    
    public V2Header(byte[] data, int offset) {
	System.arraycopy(data, offset+0, signature, 0, 1*8);
	System.arraycopy(data, offset+8, unknown1, 0, 1*44);
	System.arraycopy(data, offset+52, blockSize, 0, 4);
	System.arraycopy(data, offset+56, unknown2, 0, 1*12);
	System.arraycopy(data, offset+68, offsetToDataStart, 0, 4);
	System.arraycopy(data, offset+72, unknown3, 0, 1*12);
	System.arraycopy(data, offset+84, possiblePointerToKdfAlgorithm, 0, 4);
	System.arraycopy(data, offset+88, unknown4, 0, 1*8);
	System.arraycopy(data, offset+96, kdfAlgorithm, 0, 4);
	System.arraycopy(data, offset+100, kdfPrngAlgorithm, 0, 4);
	System.arraycopy(data, offset+104, kdfIterationCount, 0, 4);
	System.arraycopy(data, offset+108, kdfSaltLen, 0, 4);
	System.arraycopy(data, offset+112, kdfSalt, 0, 1*32);
	System.arraycopy(data, offset+144, blobEncIvSize, 0, 4);
	System.arraycopy(data, offset+148, blobEncIv, 0, 1*32);
	System.arraycopy(data, offset+180, blobEncKeyBits, 0, 4);
	System.arraycopy(data, offset+184, blobEncAlgorithm, 0, 4);
	System.arraycopy(data, offset+188, blobEncPadding, 0, 4);
	System.arraycopy(data, offset+192, blobEncMode, 0, 4);
	System.arraycopy(data, offset+196, encryptedKeyblobSize, 0, 4);
	System.arraycopy(data, offset+200, encryptedKeyblob, 0, 1*48);
    }
    
    public static int length() { return STRUCTSIZE; }
    
    /** Header signature (ASCII: 'encrcdsa'). */
    public byte[] getSignature() { return Util.readByteArrayBE(signature); }
    /** Unknown data. */
    public byte[] getUnknown1() { return Util.readByteArrayBE(unknown1); }
    /** Block size of the encrypted block data. */
    public int getBlockSize() { return Util.readIntBE(blockSize); }
    /** Unknown data. */
    public byte[] getUnknown2() { return Util.readByteArrayBE(unknown2); }
    /** Offset to the start of the encrypted block data. */
    public int getOffsetToDataStart() { return Util.readIntBE(offsetToDataStart); }
    /** Unknown data. */
    public byte[] getUnknown3() { return Util.readByteArrayBE(unknown3); }
    /** Could be a pointer to where kdf_algorithm is located. */
    public int getPossiblePointerToKdfAlgorithm() { return Util.readIntBE(possiblePointerToKdfAlgorithm); }
    /** Unknown data. */
    public byte[] getUnknown4() { return Util.readByteArrayBE(unknown4); }
    /** Algorithm of the key derivation function. */
    public int getKdfAlgorithm() { return Util.readIntBE(kdfAlgorithm); }
    /** ? */
    public int getKdfPrngAlgorithm() { return Util.readIntBE(kdfPrngAlgorithm); }
    /** Iteration count (normally 1000). */
    public int getKdfIterationCount() { return Util.readIntBE(kdfIterationCount); }
    /** Length of kdfSalt (in bytes). */
    public int getKdfSaltLen() { return Util.readIntBE(kdfSaltLen); }
    /** Salt value for key derivation. */
    public byte[] getKdfSalt() { return Util.readByteArrayBE(kdfSalt); }
    /** Size of blobEncIv. */
    public int getBlobEncIvSize() { return Util.readIntBE(blobEncIvSize); }
    /** Initialization Vector for encryption-key unwrapping. */
    public byte[] getBlobEncIv() { return Util.readByteArrayBE(blobEncIv); }
    /** Number of bits in the keyblob's encryption key. */
    public int getBlobEncKeyBits() { return Util.readIntBE(blobEncKeyBits); }
    /** Encryption algorithm used to encrypt the key blob. */
    public int getBlobEncAlgorithm() { return Util.readIntBE(blobEncAlgorithm); }
    /** Padding. (?) */
    public int getBlobEncPadding() { return Util.readIntBE(blobEncPadding); }
    /** Encryption mode for the algorithm. */
    public int getBlobEncMode() { return Util.readIntBE(blobEncMode); }
    /** Size of encryptedKeyBlob. */
    public int getEncryptedKeyblobSize() { return Util.readIntBE(encryptedKeyblobSize); }
    /** The encrypted key blob, containing all keys. */
    public byte[] getEncryptedKeyblob() { return Util.readByteArrayBE(encryptedKeyblob); }
    
    public void printFields(PrintStream ps, String prefix) {
	ps.println(prefix + " signature: \"" + Util.toASCIIString(getSignature()) + "\"");
	ps.println(prefix + " unknown1: " + getUnknown1());
	ps.println(prefix + " blockSize: " + getBlockSize());
	ps.println(prefix + " unknown2: " + getUnknown2());
	ps.println(prefix + " offsetToDataStart: " + getOffsetToDataStart());
	ps.println(prefix + " unknown3: " + getUnknown3());
	ps.println(prefix + " possiblePointerToKdfAlgorithm: " + getPossiblePointerToKdfAlgorithm());
	ps.println(prefix + " unknown4: " + getUnknown4());
	ps.println(prefix + " kdfAlgorithm: " + getKdfAlgorithm());
	ps.println(prefix + " kdfPrngAlgorithm: " + getKdfPrngAlgorithm());
	ps.println(prefix + " kdfIterationCount: " + getKdfIterationCount());
	ps.println(prefix + " kdfSaltLen: " + getKdfSaltLen());
	ps.println(prefix + " kdfSalt: 0x" + Util.byteArrayToHexString(getKdfSalt()));
	ps.println(prefix + " blobEncIvSize: " + getBlobEncIvSize());
	ps.println(prefix + " blobEncIv: 0x" + Util.byteArrayToHexString(getBlobEncIv()));
	ps.println(prefix + " blobEncKeyBits: " + getBlobEncKeyBits());
	ps.println(prefix + " blobEncAlgorithm: " + getBlobEncAlgorithm());
	ps.println(prefix + " blobEncPadding: " + getBlobEncPadding());
	ps.println(prefix + " blobEncMode: " + getBlobEncMode());
	ps.println(prefix + " encryptedKeyblobSize: " + getEncryptedKeyblobSize());
	ps.println(prefix + " encryptedKeyblob: 0x" + Util.byteArrayToHexString(getEncryptedKeyblob()));
    }
    
    public void print(PrintStream ps, String prefix) {
	ps.println(prefix + "V2Header:");
	printFields(ps, prefix);
    }
    
    public byte[] getBytes() {
	byte[] result = new byte[length()];
	int offset = 0;
	System.arraycopy(this.signature, 0, result, offset, this.signature.length); offset += this.signature.length;
	System.arraycopy(this.unknown1, 0, result, offset, this.unknown1.length); offset += this.unknown1.length;
	System.arraycopy(this.blockSize, 0, result, offset, this.blockSize.length); offset += this.blockSize.length;
	System.arraycopy(this.unknown2, 0, result, offset, this.unknown2.length); offset += this.unknown2.length;
	System.arraycopy(this.offsetToDataStart, 0, result, offset, this.offsetToDataStart.length); offset += this.offsetToDataStart.length;
	System.arraycopy(this.unknown3, 0, result, offset, this.unknown3.length); offset += this.unknown3.length;
	System.arraycopy(this.possiblePointerToKdfAlgorithm, 0, result, offset, this.possiblePointerToKdfAlgorithm.length); offset += this.possiblePointerToKdfAlgorithm.length;
	System.arraycopy(this.unknown4, 0, result, offset, this.unknown4.length); offset += this.unknown4.length;
	System.arraycopy(this.kdfAlgorithm, 0, result, offset, this.kdfAlgorithm.length); offset += this.kdfAlgorithm.length;
	System.arraycopy(this.kdfPrngAlgorithm, 0, result, offset, this.kdfPrngAlgorithm.length); offset += this.kdfPrngAlgorithm.length;
	System.arraycopy(this.kdfIterationCount, 0, result, offset, this.kdfIterationCount.length); offset += this.kdfIterationCount.length;
	System.arraycopy(this.kdfSaltLen, 0, result, offset, this.kdfSaltLen.length); offset += this.kdfSaltLen.length;
	System.arraycopy(this.kdfSalt, 0, result, offset, this.kdfSalt.length); offset += this.kdfSalt.length;
	System.arraycopy(this.blobEncIvSize, 0, result, offset, this.blobEncIvSize.length); offset += this.blobEncIvSize.length;
	System.arraycopy(this.blobEncIv, 0, result, offset, this.blobEncIv.length); offset += this.blobEncIv.length;
	System.arraycopy(this.blobEncKeyBits, 0, result, offset, this.blobEncKeyBits.length); offset += this.blobEncKeyBits.length;
	System.arraycopy(this.blobEncAlgorithm, 0, result, offset, this.blobEncAlgorithm.length); offset += this.blobEncAlgorithm.length;
	System.arraycopy(this.blobEncPadding, 0, result, offset, this.blobEncPadding.length); offset += this.blobEncPadding.length;
	System.arraycopy(this.blobEncMode, 0, result, offset, this.blobEncMode.length); offset += this.blobEncMode.length;
	System.arraycopy(this.encryptedKeyblobSize, 0, result, offset, this.encryptedKeyblobSize.length); offset += this.encryptedKeyblobSize.length;
	System.arraycopy(this.encryptedKeyblob, 0, result, offset, this.encryptedKeyblob.length); offset += this.encryptedKeyblob.length;
	return result;
    }
}
