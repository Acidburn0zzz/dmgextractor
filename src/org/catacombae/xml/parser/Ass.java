/* Generated By:JavaCC: Do not edit this line. Ass.java */
package org.catacombae.xml.parser;

import java.util.*;
import java.io.*;

public class Ass implements AssConstants {
    //private Reader usedReader;
    private XMLContentHandler contentHandler;

    public static void main(String[] args) throws Exception {
        MutableInputStreamReader usedReader;
        if(args.length == 1)
           usedReader = new MutableInputStreamReader(new FileInputStream(args[0]), "US-ASCII");
        else
           usedReader = new MutableInputStreamReader(System.in, "US-ASCII");
        Ass a = create(usedReader, new DebugXMLContentHandler());
        a.xmlDocument();
    }

    public static Ass create(Reader misr, XMLContentHandler xch) {
        Ass a = new Ass(misr);
        //a.usedReader = misr;
        a.contentHandler = xch;
        return a;
    }

  final public void xmlDocument() throws ParseException {
    prolog();
    element();
    misc();
    jj_consume_token(0);
  }

  final public void prolog() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STARTXMLDECL:
      xmlDecl();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STARTPI:
      case STARTCOMMENT:
      case DEFAULT_S:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      misc();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STARTDOCTYPEDECL:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      doctypeDecl();
      misc();
    }
  }

/* For convenience, this method returns the encoding. We need to determine that before anything else. */
  final public String xmlDecl() throws ParseException {
        String version, encoding = null;
        Boolean standalone = null;
    jj_consume_token(STARTXMLDECL);
    // Takes us to state WithinXMLDecl
            version = versionInfo();
    if (jj_2_1(2)) {
      encoding = encodingDecl();
    } else {
      ;
    }
    if (jj_2_2(2)) {
      standalone = sdDecl();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XMLDECL_S:
      jj_consume_token(XMLDECL_S);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(ENDXMLDECL);
          contentHandler.xmlDecl(version, encoding, standalone); {if (true) return encoding;}
    throw new Error("Missing return statement in function");
  }

  final public String versionInfo() throws ParseException {
        Token versionString;
    jj_consume_token(XMLDECL_S);
    jj_consume_token(VERSION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION_DOPEN:
      jj_consume_token(VERSION_DOPEN);
      versionString = jj_consume_token(VER);
      jj_consume_token(VERSION_DCLOSE);
      break;
    case VERSION_SOPEN:
      jj_consume_token(VERSION_SOPEN);
      versionString = jj_consume_token(VER);
      jj_consume_token(VERSION_SCLOSE);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return versionString.image;}
    throw new Error("Missing return statement in function");
  }

  final public String encodingDecl() throws ParseException {
        Token encoding;
    jj_consume_token(XMLDECL_S);
    jj_consume_token(ENCODING);
    jj_consume_token(XMLDECL_EQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XD_SQUOTE_OPEN:
      jj_consume_token(XD_SQUOTE_OPEN);
      encoding = jj_consume_token(XD_SQUOTE_STRING);
      jj_consume_token(XD_SQUOTE_CLOSE);
      break;
    case XD_DQUOTE_OPEN:
      jj_consume_token(XD_DQUOTE_OPEN);
      encoding = jj_consume_token(XD_DQUOTE_STRING);
      jj_consume_token(XD_DQUOTE_CLOSE);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return encoding.image;}
    throw new Error("Missing return statement in function");
  }

  final public boolean sdDecl() throws ParseException {
        boolean b;
    jj_consume_token(XMLDECL_S);
    jj_consume_token(STANDALONE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STANDALONE_DOPEN:
      jj_consume_token(STANDALONE_DOPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STANDALONE_YES:
        jj_consume_token(STANDALONE_YES);
                                                b = true;
        break;
      case STANDALONE_NO:
        jj_consume_token(STANDALONE_NO);
                                                                              b = false;
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(STANDALONE_DCLOSE);
      break;
    case STANDALONE_SOPEN:
      jj_consume_token(STANDALONE_SOPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STANDALONE_YES:
        jj_consume_token(STANDALONE_YES);
                                                b = true;
        break;
      case STANDALONE_NO:
        jj_consume_token(STANDALONE_NO);
                                                                              b = false;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(STANDALONE_SCLOSE);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

// Needs more work to support inline DTD declarations
  final public void doctypeDecl() throws ParseException {
        Token name;
    jj_consume_token(STARTDOCTYPEDECL);
    jj_consume_token(WDD_S);
    name = jj_consume_token(WDD_NAME);
    if (jj_2_3(2)) {
      jj_consume_token(WDD_S);
      jj_consume_token(EXTERNALID);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WDD_S:
      jj_consume_token(WDD_S);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN_INTSUBSET:
      jj_consume_token(BEGIN_INTSUBSET);
      intSubset();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WDD_S:
        jj_consume_token(WDD_S);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(ENDDOCTYPEDECL);
          contentHandler.doctype(name.image, null);
  }

  final public void intSubset() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHATEVER:
      jj_consume_token(WHATEVER);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(END_INTSUBSET);
  }

//void markupDecl() :
//{}
//{
//	
//}
  final public void misc() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STARTCOMMENT:
      comment();
      break;
    case STARTPI:
      pi();
      break;
    case DEFAULT_S:
      jj_consume_token(DEFAULT_S);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void comment() throws ParseException {
        Token t;
        StringBuilder sb = new StringBuilder();
    jj_consume_token(STARTCOMMENT);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT_CHAR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(COMMENT_CHAR);
                              sb.append(t.image);
    }
    jj_consume_token(ENDCOMMENT);
          contentHandler.comment(sb.toString());
  }

  final public void pi() throws ParseException {
        Token target;
        StringBuilder content = null;
    jj_consume_token(STARTPI);
    target = jj_consume_token(PITARGET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITHINPI_S:
      jj_consume_token(WITHINPI_S);
      content = piContent();
      break;
    case ENDPI:
      jj_consume_token(ENDPI);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          contentHandler.pi(target.image, content.toString());
  }

// returns the content of the processor instruction, minus the trailing "?>"
  final public StringBuilder piContent() throws ParseException {
        Token t;
        StringBuilder sb = new StringBuilder();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDPI:
        jj_consume_token(ENDPI);
        break;
      case PC_CHAR:
        t = jj_consume_token(PC_CHAR);
                         sb.append(t.image);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDPI:
      case PC_CHAR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
    }
          {if (true) return sb;}
    throw new Error("Missing return statement in function");
  }

//<WithinTag> SKIP: {
//      " " | "\t" | "\n" | "\r"
//}

//<WithinTag_DquoteString> TOKEN: {
//      < DQUOTE_STRING: (~["\""])+ >
//    | < DQUOTE_CLOSE: "\"" > : WithinTag
//}
//<WithinTag_SquoteString> TOKEN: {
//      < SQUOTE_STRING: (~["'"])+ >
//    | < SQUOTE_CLOSE: "'" > : WithinTag
//}
  final public void element() throws ParseException {
        Token name;
        Attribute currentAttribute;
        LinkedList<Attribute> attributes = new LinkedList<Attribute>();
    jj_consume_token(STARTTAG);
    // DEFAULT -> WithinTag
            name = jj_consume_token(WT_NAME);
    label_5:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(WT_S);
      currentAttribute = attribute();
                                                              attributes.add(currentAttribute);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WT_S:
      jj_consume_token(WT_S);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMPTY_ENDTAG:
      jj_consume_token(EMPTY_ENDTAG);
            contentHandler.emptyElement(name.image, attributes);
      break;
    case ENDTAG:
      jj_consume_token(ENDTAG);
            contentHandler.startElement(name.image, attributes);
      content();
      etag(name);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Attribute attribute() throws ParseException {
        Token t, name;
        LinkedList<Attribute.ValueComponent> value = new LinkedList<Attribute.ValueComponent>();
    name = jj_consume_token(WT_NAME);
    jj_consume_token(WT_EQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WT_DQUOTE:
      jj_consume_token(WT_DQUOTE);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR_DQUOTE_STRING:
        case ATTR_REFERENCE:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR_DQUOTE_STRING:
          t = jj_consume_token(ATTR_DQUOTE_STRING);
                                         value.add(new Attribute.StringComponent(t.image));
          break;
        case ATTR_REFERENCE:
          t = jj_consume_token(ATTR_REFERENCE);
                                     value.add(new Attribute.ReferenceComponent(t.image));
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(ATTR_DQUOTE);
      break;
    case WT_SQUOTE:
      jj_consume_token(WT_SQUOTE);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR_SQUOTE_STRING:
        case ATTR_REFERENCE:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR_SQUOTE_STRING:
          t = jj_consume_token(ATTR_SQUOTE_STRING);
                                         value.add(new Attribute.StringComponent(t.image));
          break;
        case ATTR_REFERENCE:
          t = jj_consume_token(ATTR_REFERENCE);
                                     value.add(new Attribute.ReferenceComponent(t.image));
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(ATTR_SQUOTE);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new Attribute(name.image, new Attribute.Value(value));}
    throw new Error("Missing return statement in function");
  }

  final public void etag(Token startName) throws ParseException {
        Token name;
    jj_consume_token(STARTCLOSINGTAG);
    // DEFAULT -> WithinTag
            name = jj_consume_token(WT_NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WT_S:
      jj_consume_token(WT_S);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(ENDTAG);
          if(startName.image.equals(name.image))
              contentHandler.endElement(name.image);
          else
              {if (true) throw new ParseException("Expected \"</" + startName.image + "\" but got \"</" + name.image + "\".");}
  }

  final public void content() throws ParseException {
        StringBuilder sb = new StringBuilder();
        Token t;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULT_S:
      case CHARDATA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARDATA:
        t = jj_consume_token(CHARDATA);
                         sb.append(t.image);
        break;
      case DEFAULT_S:
        jj_consume_token(DEFAULT_S);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          if(sb.length() > 0) contentHandler.chardata(sb.toString()); sb = new StringBuilder();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STARTTAG:
      case STARTPI:
      case STARTCOMMENT:
      case STARTCDATA:
      case DEFAULT_REFERENCE:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STARTTAG:
        element();
        break;
      case DEFAULT_REFERENCE:
        t = jj_consume_token(DEFAULT_REFERENCE);
                                                  contentHandler.reference(t.image);
        break;
      case STARTCDATA:
        cdSect();
        break;
      case STARTPI:
        pi();
        break;
      case STARTCOMMENT:
        comment();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEFAULT_S:
        case CHARDATA:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHARDATA:
          t = jj_consume_token(CHARDATA);
                           if(sb.length() != 0) sb.append(" "); sb.append(t.image);
          break;
        case DEFAULT_S:
          jj_consume_token(DEFAULT_S);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            if(sb.length() > 0) contentHandler.chardata(sb.toString()); sb = new StringBuilder();
    }
  }

  final public void cdSect() throws ParseException {
        Token t;
        StringBuilder cdata = new StringBuilder();
    jj_consume_token(STARTCDATA);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDCDATA:
      case WCD_CHAR:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDCDATA:
        jj_consume_token(ENDCDATA);
        break;
      case WCD_CHAR:
        t = jj_consume_token(WCD_CHAR);
                          cdata.append(t.image);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          contentHandler.cdata(cdata.toString());
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(XMLDECL_S)) return true;
    if (jj_scan_token(ENCODING)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(XMLDECL_S)) return true;
    if (jj_scan_token(STANDALONE)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(WT_NAME)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(WT_S)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(WDD_S)) return true;
    if (jj_scan_token(EXTERNALID)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  public AssTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x20000,0x290000,0x40000,0x2000000,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x290000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600000,0x600000,0x994000,0x994000,0x600000,0x600000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x50,0x0,0x6000,0x6000,0xa00,0x8000,0x8000,0x400000,0x1000000,0x0,0x8000000,0x90000000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x8,0xc0,0x1400,0x1400,0x1800,0x1800,0x30,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x6000,0x6000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Ass(java.io.InputStream stream) {
     this(stream, null);
  }
  public Ass(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AssTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Ass(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AssTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Ass(AssTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(AssTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[79];
    for (int i = 0; i < 79; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
